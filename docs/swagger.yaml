basePath: /v1
definitions:
  auth.CheckDTO:
    properties:
      telegram_id:
        minLength: 1
        type: string
      token:
        minLength: 1
        type: string
    required:
    - telegram_id
    - token
    type: object
  auth.CheckResponse:
    properties:
      exp_at:
        type: string
      telegram_id:
        type: string
      token:
        type: string
    type: object
  auth.ErrorResponse:
    properties:
      detail:
        type: string
      error:
        type: string
    type: object
  auth.RefreshDTO:
    properties:
      refresh_token:
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
    required:
    - refresh_token
    - telegram_id
    type: object
  auth.RefreshResponse:
    properties:
      access_exp_at:
        type: string
      access_token:
        type: string
      refresh_exp_at:
        type: string
      refresh_token:
        type: string
    type: object
  auth.SignInDTO:
    properties:
      first_name:
        minLength: 1
        type: string
      last_name:
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - first_name
    - telegram_id
    - username
    type: object
  auth.SignInResp:
    properties:
      access_exp_at:
        type: string
      access_token:
        type: string
      refresh_exp_at:
        type: string
      refresh_token:
        type: string
    type: object
  product.AddExcludeProductsByTelegramIDDTO:
    properties:
      products:
        items:
          type: string
        maxItems: 50
        minItems: 1
        type: array
      telegram_id:
        minLength: 1
        type: string
    required:
    - products
    - telegram_id
    type: object
  product.AddExcludeProductsByUserIDDTO:
    properties:
      products:
        items:
          type: string
        maxItems: 50
        minItems: 1
        type: array
      user_id:
        type: integer
    required:
    - products
    - user_id
    type: object
  product.ErrorResponse:
    properties:
      detail:
        type: string
      error:
        type: string
    type: object
  product.UserExcludedProducts:
    properties:
      created_at:
        type: string
      id:
        type: integer
      products:
        items:
          type: string
        type: array
      telegram_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  recipe.ErrorResponse:
    properties:
      detail:
        type: string
      error:
        type: string
    type: object
  recipe.UserFreeRecipes:
    properties:
      created_at:
        type: string
      free_recipes_allowed:
        type: integer
      free_recipes_used:
        type: integer
      id:
        type: integer
      telegram_id:
        type: string
      updated_at:
        type: string
    type: object
  subscription.ErrorResponse:
    properties:
      detail:
        type: string
      error:
        type: string
    type: object
  subscription.Subscription:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      subscribed_at:
        type: string
      telegram_id:
        type: string
      updated_at:
        type: string
    type: object
  user.CreateDTO:
    properties:
      first_name:
        minLength: 1
        type: string
      last_name:
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - first_name
    - telegram_id
    - username
    type: object
  user.ErrorResponse:
    properties:
      detail:
        type: string
      error:
        type: string
    type: object
  user.ExistsDTO:
    properties:
      telegram_id:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - telegram_id
    - username
    type: object
  user.ListDTO:
    properties:
      page:
        type: integer
      size:
        type: integer
    required:
    - page
    - size
    type: object
  user.ListResponseSwagger:
    properties:
      current_page:
        type: integer
      data:
        items:
          $ref: '#/definitions/user.User'
        type: array
      size:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  user.UpdateDTO:
    properties:
      first_name:
        minLength: 1
        type: string
      id:
        type: integer
      last_name:
        minLength: 1
        type: string
      telegram_id:
        minLength: 1
        type: string
      username:
        minLength: 1
        type: string
    required:
    - first_name
    - id
    - telegram_id
    - username
    type: object
  user.User:
    properties:
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      telegram_id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:50050
info:
  contact: {}
  description: This is a application for telegram web apps application.
  title: API application for telegram web apps application foodgrammm
  version: "1.0"
paths:
  /ping:
    get:
      description: Check server status
      produces:
      - application/json
      responses:
        "200":
          description: 'message: pong'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ping
      tags:
      - Health
  /v1/auth/check:
    post:
      consumes:
      - application/json
      description: Check if the provided Telegram ID and token are valid
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Check request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.CheckDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with user token details
          schema:
            $ref: '#/definitions/auth.CheckResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Check user token
      tags:
      - Authentication
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the access token using the provided Telegram ID and refresh
        token
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Refresh request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with new tokens
          schema:
            $ref: '#/definitions/auth.RefreshResponse'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Refresh user token
      tags:
      - Authentication
  /v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in a user using their Telegram ID, username, first name, and
        last name
      parameters:
      - description: Sign in request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.SignInDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with tokens
          schema:
            $ref: '#/definitions/auth.SignInResp'
        "400":
          description: Bad request error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Sign in user
      tags:
      - Authentication
  /v1/product/exclude/telegram/{telegramID}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows you to delete excluded products for a user
        identified by their Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID of the user
        in: path
        name: telegramID
        required: true
        type: string
      - description: Product name to be deleted
        in: query
        name: product
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted excluded product
          schema:
            $ref: '#/definitions/product.UserExcludedProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Delete excluded products by Telegram ID
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get excluded products for a user by their unique Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Excluded products for the user
          schema:
            $ref: '#/definitions/product.UserExcludedProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Get Exclude Products by Telegram ID
      tags:
      - Product
  /v1/product/exclude/telegram/id:
    post:
      consumes:
      - application/json
      description: Add excluded products for a user by their unique Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exclude products data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.AddExcludeProductsByTelegramIDDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Excluded products for the user
          schema:
            $ref: '#/definitions/product.UserExcludedProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Add Exclude Products by Telegram ID
      tags:
      - Product
  /v1/product/exclude/user/{userID}:
    get:
      consumes:
      - application/json
      description: Get excluded products for a user by their unique User ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Excluded products for the user
          schema:
            $ref: '#/definitions/product.UserExcludedProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Get Exclude Products by User ID
      tags:
      - Product
  /v1/product/exclude/user/id:
    post:
      consumes:
      - application/json
      description: Add excluded products for a user by their unique User ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exclude products data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.AddExcludeProductsByUserIDDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Excluded products for the user
          schema:
            $ref: '#/definitions/product.UserExcludedProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Add Exclude Products by User ID
      tags:
      - Product
  /v1/recipe/free/telegram/{telegramID}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the free recipes information for a user
        identified by their Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID of the user
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved free recipes information
          schema:
            $ref: '#/definitions/recipe.UserFreeRecipes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/recipe.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/recipe.ErrorResponse'
      summary: Get free recipes by Telegram ID
      tags:
      - Recipe
    post:
      consumes:
      - application/json
      description: This endpoint increments the count of free recipes available for
        a user identified by their Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID of the user
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully incremented free recipes count
          schema:
            $ref: '#/definitions/recipe.UserFreeRecipes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/recipe.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/recipe.ErrorResponse'
      summary: Add free recipes count by Telegram ID
      tags:
      - Recipe
  /v1/subscription/exists/telegram/{telegramID}:
    get:
      consumes:
      - application/json
      description: Checks whether a subscription exists for a user with the specified
        Telegram ID.
      parameters:
      - description: Telegram ID of the user
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Indicates whether the subscription exists
          schema:
            type: boolean
        "400":
          description: Invalid or missing 'telegramID' parameter
          schema:
            $ref: '#/definitions/subscription.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/subscription.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/subscription.ErrorResponse'
      summary: Check if subscription exists by Telegram ID
      tags:
      - Subscription
  /v1/subscription/telegram/{telegramID}:
    get:
      consumes:
      - application/json
      description: Retrieves subscription details for a user with the specified Telegram
        ID.
      parameters:
      - description: Telegram ID of the user
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Subscription details
          schema:
            $ref: '#/definitions/subscription.Subscription'
        "400":
          description: Invalid or missing 'telegramID' parameter
          schema:
            $ref: '#/definitions/subscription.ErrorResponse'
        "404":
          description: User not found or subscription does not exist
          schema:
            $ref: '#/definitions/subscription.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/subscription.ErrorResponse'
      summary: Get subscription by Telegram ID
      tags:
      - Subscription
  /v1/user:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Create a new user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update a user's information.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user details
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Update a user
      tags:
      - User
  /v1/user/all:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Get all users
      tags:
      - User
  /v1/user/exists:
    post:
      consumes:
      - application/json
      description: Check if a user exists by Telegram ID and Username.
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ExistsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Boolean flag indicating if the user exists
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Check if a user exists
      tags:
      - User
  /v1/user/exists/id/{userID}:
    get:
      consumes:
      - application/json
      description: Check if a user exists by their unique identifier.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Boolean flag indicating if the user exists
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Check if a user exists by ID
      tags:
      - User
  /v1/user/exists/telegram/{telegramID}:
    get:
      consumes:
      - application/json
      description: Check if a user exists by their unique Telegram ID.
      parameters:
      - description: Telegram ID
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Boolean flag indicating if the user exists
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Check if a user exists by Telegram ID
      tags:
      - User
  /v1/user/id/{userID}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their unique identifier.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ID of the deleted user
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Delete a user by ID
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique identifier.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Get a user by ID
      tags:
      - User
  /v1/user/list:
    post:
      consumes:
      - application/json
      description: Retrieve a list of users with pagination based on page and size.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Pagination parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ListDTO'
      produces:
      - application/json
      responses:
        "200":
          description: List of users with pagination details
          schema:
            $ref: '#/definitions/user.ListResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Get a list of users with pagination
      tags:
      - User
  /v1/user/telegram/{telegramID}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their unique Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted Telegram ID
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Delete a user by Telegram ID
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique Telegram ID.
      parameters:
      - default: Bearer <token>
        description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Telegram ID
        in: path
        name: telegramID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Get a user by Telegram ID
      tags:
      - User
swagger: "2.0"
