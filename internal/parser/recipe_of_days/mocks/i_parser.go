// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	parser "github.com/go-jedi/foodgrammm-backend/internal/domain/parser"
	mock "github.com/stretchr/testify/mock"
)

// IParser is an autogenerated mock type for the IParser type
type IParser struct {
	mock.Mock
}

// ParseRecipe provides a mock function with given fields: input
func (_m *IParser) ParseRecipe(input string) (parser.ParsedRecipeOfDays, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ParseRecipe")
	}

	var r0 parser.ParsedRecipeOfDays
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (parser.ParsedRecipeOfDays, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(string) parser.ParsedRecipeOfDays); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(parser.ParsedRecipeOfDays)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIParser creates a new instance of IParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *IParser {
	mock := &IParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
