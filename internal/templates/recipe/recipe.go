package recipe

import (
	"bytes"
	"errors"
	"text/template"
)

var (
	ErrNotFoundTemplateFunction    = errors.New("templates function not found for the specified type")
	ErrTemplateFunctionReturnEmpty = errors.New("templates function returned empty string")
)

type templateFunc func(GenerateRecipe) (string, error)

type GenerateRecipe struct {
	Type                  int      `json:"type"`
	Products              []string `json:"products"`
	NonConsumableProducts *string  `json:"non_consumable_products"`
	Name                  *string  `json:"name"`
	AmountCalories        *int     `json:"amount_calories"`
	AvailableProducts     []string `json:"available_products"`
}

type Template struct {
	temps map[int]templateFunc
}

func NewTemplate() *Template {
	r := &Template{}

	r.temps = map[int]templateFunc{
		1: r.getMenuForOneDay,
		2: r.getFitnessMenu,
		3: r.getAvailableProductsMenu,
		4: r.getMenuByName,
	}

	return r
}

// Generate need templates.
func (t *Template) Generate(data GenerateRecipe) (string, error) {
	tFn, ok := t.temps[data.Type]
	if !ok {
		return "", ErrNotFoundTemplateFunction
	}

	tr, err := tFn(data)
	if err != nil {
		return "", err
	}

	if len(tr) == 0 {
		return "", ErrTemplateFunctionReturnEmpty
	}

	return tr, nil
}

// executeTemplate executes the templates with the provided data.
func (t *Template) executeTemplate(tmpl string, data GenerateRecipe) (string, error) {
	tp, err := template.New("recipe").Parse(tmpl)
	if err != nil {
		return "", err
	}

	var buf bytes.Buffer
	if err := tp.Execute(&buf, data); err != nil {
		return "", err
	}

	return buf.String(), nil
}

// getMenuForOneDay get menu for one day.
func (t *Template) getMenuForOneDay(data GenerateRecipe) (string, error) {
	tmpl := `
Составь мне меню на день (завтрак, обед, полдник, ужин), используя только безопасные для меня продукты. Исключи из рецептов любые ингредиенты, на которые у меня аллергия ({{.Products}}), а также продукты, которые я не употребляю ({{.NonConsumableProducts}}). Не упоминай в ответе об аллергиях или причинах исключения этих ингредиентов.

Каждое блюдо должно быть:

1. Простым в приготовлении.

2. Оригинальным и разнообразным.

3. С подробным описанием рецепта:

Ингредиенты (с указанием количества в граммах или штуках).

Пошаговый процесс приготовления.

Приблизительное время готовки (в минутах).

Калорийность (в ккал).

БЖУ (белки, жиры, углеводы) в граммах.


Оформи ответ строго по следующей структуре (с точными заголовками и форматированием):

Меню на день

Завтрак: [Название блюда]
Ингредиенты:
[Продукт 1] — [количество]
[Продукт 2] — [количество]
...
Рецепт:
[Шаг 1]
[Шаг 2]
...
Время готовки: [X минут]
Калорийность: [X ккал]
БЖУ: Белки — [X г], Жиры — [X г], Углеводы — [X г]

Обед: [Название блюда]
Ингредиенты:
...
Рецепт:
...
Время готовки: ...
Калорийность: ...
БЖУ: Белки — ..., Жиры — ..., Углеводы — ...

Полдник: [Название блюда]
Ингредиенты:
...
Рецепт:
...
Время готовки: ...
Калорийность: ...
БЖУ: Белки — ..., Жиры — ..., Углеводы — ...

Ужин: [Название блюда]
Ингредиенты:
...
Рецепт:
...
Время готовки: ...
Калорийность: ...
БЖУ: Белки — ..., Жиры — ..., Углеводы — ...

Не добавляй лишнего текста или пояснений — только то, что указано в структуре. Не упоминай об аллергиях и исключённых продуктах в самом ответе. Убедись, что все рецепты реалистичны и не содержат ошибок.
`

	return t.executeTemplate(tmpl, data)
}

// getFitnessMenu get fitness menu.
func (t *Template) getFitnessMenu(data GenerateRecipe) (string, error) {
	tmpl := `
Составь мне фитнес-меню на день (завтрак, обед, полдник, ужин) с общим калоражем {{.AmountCalories}} ккал. В каждом блюде укажи точные граммовки, пошаговый рецепт, время готовки, а также калорийность и БЖУ. Учти, что у меня аллергия на {{.Products}} и я не употребляю {{.NonConsumableProducts}} — исключи их из рецептов, но не упоминай об этом в ответе. Сделай акцент на белке и клетчатке.

Оформи ответ строго в следующем формате (с сохранением всех заголовков и подзаголовков):

Фитнес-меню

Завтрак: [Название блюда]
Общий калораж: [X ккал]

Ингредиенты:
[Продукт 1] — [количество]
[Продукт 2] — [количество]
...

Рецепт:
[Шаг 1]
[Шаг 2]
...

Время готовки: [X минут]
Калорийность: [X ккал]
БЖУ: Белки — [X г], Жиры — [X г], Углеводы — [X г]

Обед: [Название блюда]
Общий калораж: [X ккал]

Ингредиенты:
...

Рецепт:
...

Время готовки: ...
Калорийность: ...
БЖУ: Белки — ..., Жиры — ..., Углеводы — ...

Полдник: [Название блюда]
Общий калораж: [X ккал]

Ингредиенты:
...

Рецепт:
...

Время готовки: ...
Калорийность: ...
БЖУ: Белки — ..., Жиры — ..., Углеводы — ...

Ужин: [Название блюда]
Общий калораж: [X ккал]

Ингредиенты:
...

Рецепт:
...

Время готовки: ...
Калорийность: ...
БЖУ: Белки — ..., Жиры — ..., Углеводы — ...

Не добавляй лишнюю информацию или пояснения — только то, что требуется структурой. Убедись, что все рецепты выглядят реалистично и не содержат ошибок.
`
	return t.executeTemplate(tmpl, data)
}

// getAvailableProductsMenu get menu of available products.
func (t *Template) getAvailableProductsMenu(data GenerateRecipe) (string, error) {
	tmpl := `
У меня есть: {{.AvailableProducts}}. Придумай три разных блюда (не обязательно завтрак/обед/ужин — любые три варианта), используя только перечисленные ингредиенты. Учти, что у меня аллергия на {{.Products}} и я не употребляю {{.NonConsumableProducts}}, — полностью исключи их из рецептов. В одном из трёх блюд можешь добавить небольшой дополнительный продукт, которого нет в моём списке, если это уместно и безопасно.

При составлении каждого блюда:

1. Укажи точное название (например, “Блюдо 1: ...”, “Блюдо 2: ...”, “Блюдо 3: ...”).


2. В списке “Ингредиенты” перечисли нужные продукты и их количество (в граммах или штуках).


3. В пункте “Рецепт” пошагово опиши приготовление.


4. Укажи общее время готовки (в минутах) и общую калорийность блюда.


5. Приведи БЖУ (белки, жиры, углеводы).


6. Не упоминай аллергию или исключённые продукты в тексте рецептов.


7. Не добавляй никаких лишних комментариев или уточнений.


Структура ответа (обязательно соблюдай формат):

Меню из имеющихся продуктов

Блюдо 1: [Название блюда]
Ингредиенты:
[Продукт 1] — [количество]
[Продукт 2] — [количество]
…

Рецепт:
[Шаг 1]
[Шаг 2]
…

Время готовки: [время в минутах]
Калорийность: [ккал]
БЖУ: Белки — [г], Жиры — [г], Углеводы — [г]

Блюдо 2: [Название блюда]
(аналогичная структура)

Блюдо 3: [Название блюда]
(аналогичная структура)


---

Используйте этот промт, чтобы получать три подробных рецепта, учитывающих доступные продукты, аллергию и нежелательные ингредиенты, а также один возможный дополнительный ингредиент в одном из блюд.
`

	return t.executeTemplate(tmpl, data)
}

// getMenuByName get menu by name.
func (t *Template) getMenuByName(data GenerateRecipe) (string, error) {
	tmpl := `
Ты — эксперт в кулинарии. Помоги мне приготовить блюдо под названием «{{.Name}}».

У меня есть ограничения:

Я не использую продукты, на которые у меня аллергия: {{.Products}}.

Я также не употребляю: {{.NonConsumableProducts}}.


В своём ответе:

1. Исключи вышеназванные продукты или предложи разумные замены (не указывая, почему они заменяются).


2. Опиши рецепт максимально подробно и развернуто, шаг за шагом, с пояснениями, почему делаем тот или иной шаг (если уместно).


3. Дай список ингредиентов (указывая количество в граммах или штуках), время приготовления, сложность, примерную калорийность и БЖУ (Белки, Жиры, Углеводы).


4. Не упоминай об аллергии, исключённых продуктах или причинах замены в финальном тексте рецепта.


5. Чётко соблюдай структуру ответа:

Структура ответа (обязательно соблюдай формат):

Получить рецепт

Блюдо: {{.Name}}

Ингредиенты:
[Продукт 1] — [количество]
[Продукт 2] — [количество]
...

Рецепт:
[Шаг 1]
[Шаг 2]
...

Время готовки: [время в минутах]
Сложность: [уровень сложности]
Калорийность: [ккал]
БЖУ: Белки — [г], Жиры — [г], Углеводы — [г]

6. Не добавляй лишний текст, оставайся в заданном формате, чтобы в ответе были только необходимые разделы и данные.
`

	return t.executeTemplate(tmpl, data)
}
