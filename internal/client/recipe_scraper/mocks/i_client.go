// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	parser "github.com/go-jedi/foodgramm_backend/internal/domain/parser"
	mock "github.com/stretchr/testify/mock"

	recipescraper "github.com/go-jedi/foodgramm_backend/internal/domain/recipe_scraper"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, data
func (_m *IClient) Get(ctx context.Context, data recipescraper.GetBody) (parser.ParsedRecipe, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 parser.ParsedRecipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipescraper.GetBody) (parser.ParsedRecipe, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipescraper.GetBody) parser.ParsedRecipe); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(parser.ParsedRecipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipescraper.GetBody) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
