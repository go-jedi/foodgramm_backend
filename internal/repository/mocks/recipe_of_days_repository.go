// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	parser "github.com/go-jedi/foodgrammm-backend/internal/domain/parser"
	mock "github.com/stretchr/testify/mock"

	recipeofdays "github.com/go-jedi/foodgrammm-backend/internal/domain/recipe_of_days"
)

// RecipeOfDaysRepository is an autogenerated mock type for the RecipeOfDaysRepository type
type RecipeOfDaysRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *RecipeOfDaysRepository) Create(ctx context.Context, data parser.ParsedRecipeOfDays) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, parser.ParsedRecipeOfDays) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *RecipeOfDaysRepository) Get(ctx context.Context) (recipeofdays.Recipe, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 recipeofdays.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (recipeofdays.Recipe, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) recipeofdays.Recipe); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(recipeofdays.Recipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecipeOfDaysRepository creates a new instance of RecipeOfDaysRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeOfDaysRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeOfDaysRepository {
	mock := &RecipeOfDaysRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
