// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	userblacklist "github.com/go-jedi/foodgrammm-backend/internal/domain/user_blacklist"
)

// UserBlackListRepository is an autogenerated mock type for the UserBlackListRepository type
type UserBlackListRepository struct {
	mock.Mock
}

// AllBannedUsers provides a mock function with given fields: ctx
func (_m *UserBlackListRepository) AllBannedUsers(ctx context.Context) ([]userblacklist.UsersBlackList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllBannedUsers")
	}

	var r0 []userblacklist.UsersBlackList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]userblacklist.UsersBlackList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []userblacklist.UsersBlackList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userblacklist.UsersBlackList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockUser provides a mock function with given fields: ctx, dto
func (_m *UserBlackListRepository) BlockUser(ctx context.Context, dto userblacklist.BlockUserDTO) (userblacklist.UsersBlackList, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for BlockUser")
	}

	var r0 userblacklist.UsersBlackList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, userblacklist.BlockUserDTO) (userblacklist.UsersBlackList, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, userblacklist.BlockUserDTO) userblacklist.UsersBlackList); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(userblacklist.UsersBlackList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, userblacklist.BlockUserDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, telegramID
func (_m *UserBlackListRepository) Exists(ctx context.Context, telegramID string) (bool, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockUser provides a mock function with given fields: ctx, telegramID
func (_m *UserBlackListRepository) UnblockUser(ctx context.Context, telegramID string) (string, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for UnblockUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserBlackListRepository creates a new instance of UserBlackListRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserBlackListRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserBlackListRepository {
	mock := &UserBlackListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
