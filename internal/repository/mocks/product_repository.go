// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	product "github.com/go-jedi/foodgrammm-backend/internal/domain/product"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// AddExcludeProductsByTelegramID provides a mock function with given fields: ctx, dto
func (_m *ProductRepository) AddExcludeProductsByTelegramID(ctx context.Context, dto product.AddExcludeProductsByTelegramIDDTO) (product.UserExcludedProducts, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for AddExcludeProductsByTelegramID")
	}

	var r0 product.UserExcludedProducts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, product.AddExcludeProductsByTelegramIDDTO) (product.UserExcludedProducts, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, product.AddExcludeProductsByTelegramIDDTO) product.UserExcludedProducts); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(product.UserExcludedProducts)
	}

	if rf, ok := ret.Get(1).(func(context.Context, product.AddExcludeProductsByTelegramIDDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExcludeProductsByTelegramID provides a mock function with given fields: ctx, telegramID, prod
func (_m *ProductRepository) DeleteExcludeProductsByTelegramID(ctx context.Context, telegramID string, prod string) (product.UserExcludedProducts, error) {
	ret := _m.Called(ctx, telegramID, prod)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExcludeProductsByTelegramID")
	}

	var r0 product.UserExcludedProducts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (product.UserExcludedProducts, error)); ok {
		return rf(ctx, telegramID, prod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) product.UserExcludedProducts); ok {
		r0 = rf(ctx, telegramID, prod)
	} else {
		r0 = ret.Get(0).(product.UserExcludedProducts)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, telegramID, prod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExcludeProductsByTelegramID provides a mock function with given fields: ctx, telegramID
func (_m *ProductRepository) GetExcludeProductsByTelegramID(ctx context.Context, telegramID string) (product.UserExcludedProducts, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetExcludeProductsByTelegramID")
	}

	var r0 product.UserExcludedProducts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (product.UserExcludedProducts, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) product.UserExcludedProducts); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(product.UserExcludedProducts)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
