// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	clientassets "github.com/go-jedi/foodgrammm-backend/internal/domain/client_assets"

	fileserver "github.com/go-jedi/foodgrammm-backend/internal/domain/file_server"

	mock "github.com/stretchr/testify/mock"
)

// ClientAssetsRepository is an autogenerated mock type for the ClientAssetsRepository type
type ClientAssetsRepository struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *ClientAssetsRepository) All(ctx context.Context) ([]clientassets.ClientAssets, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []clientassets.ClientAssets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]clientassets.ClientAssets, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []clientassets.ClientAssets); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientassets.ClientAssets)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, data
func (_m *ClientAssetsRepository) Create(ctx context.Context, data fileserver.UploadAndConvertToWebpResponse) (clientassets.ClientAssets, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 clientassets.ClientAssets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, fileserver.UploadAndConvertToWebpResponse) (clientassets.ClientAssets, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, fileserver.UploadAndConvertToWebpResponse) clientassets.ClientAssets); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(clientassets.ClientAssets)
	}

	if rf, ok := ret.Get(1).(func(context.Context, fileserver.UploadAndConvertToWebpResponse) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientAssetsRepository creates a new instance of ClientAssetsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientAssetsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientAssetsRepository {
	mock := &ClientAssetsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
