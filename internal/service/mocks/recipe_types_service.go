// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	recipetypes "github.com/go-jedi/foodgrammm-backend/internal/domain/recipe_types"
	mock "github.com/stretchr/testify/mock"
)

// RecipeTypesService is an autogenerated mock type for the RecipeTypesService type
type RecipeTypesService struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *RecipeTypesService) All(ctx context.Context) ([]recipetypes.RecipeTypes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []recipetypes.RecipeTypes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]recipetypes.RecipeTypes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []recipetypes.RecipeTypes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]recipetypes.RecipeTypes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, dto
func (_m *RecipeTypesService) Create(ctx context.Context, dto recipetypes.CreateDTO) (recipetypes.RecipeTypes, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 recipetypes.RecipeTypes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipetypes.CreateDTO) (recipetypes.RecipeTypes, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipetypes.CreateDTO) recipetypes.RecipeTypes); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(recipetypes.RecipeTypes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipetypes.CreateDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, recipeTypeID
func (_m *RecipeTypesService) DeleteByID(ctx context.Context, recipeTypeID int64) (int64, error) {
	ret := _m.Called(ctx, recipeTypeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, recipeTypeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, recipeTypeID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, recipeTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, recipeTypeID
func (_m *RecipeTypesService) GetByID(ctx context.Context, recipeTypeID int64) (recipetypes.RecipeTypes, error) {
	ret := _m.Called(ctx, recipeTypeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 recipetypes.RecipeTypes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (recipetypes.RecipeTypes, error)); ok {
		return rf(ctx, recipeTypeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) recipetypes.RecipeTypes); ok {
		r0 = rf(ctx, recipeTypeID)
	} else {
		r0 = ret.Get(0).(recipetypes.RecipeTypes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, recipeTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *RecipeTypesService) Update(ctx context.Context, dto recipetypes.UpdateDTO) (recipetypes.RecipeTypes, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 recipetypes.RecipeTypes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipetypes.UpdateDTO) (recipetypes.RecipeTypes, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipetypes.UpdateDTO) recipetypes.RecipeTypes); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(recipetypes.RecipeTypes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipetypes.UpdateDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecipeTypesService creates a new instance of RecipeTypesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeTypesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeTypesService {
	mock := &RecipeTypesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
