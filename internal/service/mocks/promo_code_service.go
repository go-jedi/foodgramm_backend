// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	promocode "github.com/go-jedi/foodgramm_backend/internal/domain/promocode"
	mock "github.com/stretchr/testify/mock"
)

// PromoCodeService is an autogenerated mock type for the PromoCodeService type
type PromoCodeService struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, dto
func (_m *PromoCodeService) Apply(ctx context.Context, dto promocode.ApplyDTO) (promocode.ApplyResponse, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 promocode.ApplyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, promocode.ApplyDTO) (promocode.ApplyResponse, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, promocode.ApplyDTO) promocode.ApplyResponse); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(promocode.ApplyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, promocode.ApplyDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, dto
func (_m *PromoCodeService) Create(ctx context.Context, dto promocode.CreateDTO) (promocode.PromoCode, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 promocode.PromoCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, promocode.CreateDTO) (promocode.PromoCode, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, promocode.CreateDTO) promocode.PromoCode); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(promocode.PromoCode)
	}

	if rf, ok := ret.Get(1).(func(context.Context, promocode.CreateDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPromoCodeValidForUser provides a mock function with given fields: ctx, dto
func (_m *PromoCodeService) IsPromoCodeValidForUser(ctx context.Context, dto promocode.IsPromoCodeValidForUserDTO) (bool, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for IsPromoCodeValidForUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, promocode.IsPromoCodeValidForUserDTO) (bool, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, promocode.IsPromoCodeValidForUserDTO) bool); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, promocode.IsPromoCodeValidForUserDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPromoCodeService creates a new instance of PromoCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPromoCodeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PromoCodeService {
	mock := &PromoCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
