// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	recipe "github.com/go-jedi/foodgrammm-backend/internal/domain/recipe"
	mock "github.com/stretchr/testify/mock"
)

// RecipeService is an autogenerated mock type for the RecipeService type
type RecipeService struct {
	mock.Mock
}

// GenerateRecipe provides a mock function with given fields: ctx, dto
func (_m *RecipeService) GenerateRecipe(ctx context.Context, dto recipe.GenerateRecipeDTO) (recipe.Recipes, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRecipe")
	}

	var r0 recipe.Recipes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipe.GenerateRecipeDTO) (recipe.Recipes, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipe.GenerateRecipeDTO) recipe.Recipes); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(recipe.Recipes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipe.GenerateRecipeDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFreeRecipesByTelegramID provides a mock function with given fields: ctx, telegramID
func (_m *RecipeService) GetFreeRecipesByTelegramID(ctx context.Context, telegramID string) (recipe.UserFreeRecipes, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetFreeRecipesByTelegramID")
	}

	var r0 recipe.UserFreeRecipes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (recipe.UserFreeRecipes, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) recipe.UserFreeRecipes); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(recipe.UserFreeRecipes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListRecipesByTelegramID provides a mock function with given fields: ctx, dto
func (_m *RecipeService) GetListRecipesByTelegramID(ctx context.Context, dto recipe.GetListRecipesByTelegramIDDTO) (recipe.GetListRecipesByTelegramIDResponse, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for GetListRecipesByTelegramID")
	}

	var r0 recipe.GetListRecipesByTelegramIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipe.GetListRecipesByTelegramIDDTO) (recipe.GetListRecipesByTelegramIDResponse, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipe.GetListRecipesByTelegramIDDTO) recipe.GetListRecipesByTelegramIDResponse); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(recipe.GetListRecipesByTelegramIDResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipe.GetListRecipesByTelegramIDDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipesByTelegramID provides a mock function with given fields: ctx, telegramID
func (_m *RecipeService) GetRecipesByTelegramID(ctx context.Context, telegramID string) ([]recipe.Recipes, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipesByTelegramID")
	}

	var r0 []recipe.Recipes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]recipe.Recipes, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []recipe.Recipes); ok {
		r0 = rf(ctx, telegramID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]recipe.Recipes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecipeService creates a new instance of RecipeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeService {
	mock := &RecipeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
