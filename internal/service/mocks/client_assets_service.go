// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	clientassets "github.com/go-jedi/foodgramm_backend/internal/domain/client_assets"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ClientAssetsService is an autogenerated mock type for the ClientAssetsService type
type ClientAssetsService struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *ClientAssetsService) All(ctx context.Context) ([]clientassets.ClientAssets, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []clientassets.ClientAssets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]clientassets.ClientAssets, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []clientassets.ClientAssets); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientassets.ClientAssets)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, file
func (_m *ClientAssetsService) Create(ctx context.Context, file *multipart.FileHeader) (clientassets.ClientAssets, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 clientassets.ClientAssets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) (clientassets.ClientAssets, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) clientassets.ClientAssets); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(clientassets.ClientAssets)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientAssetsService creates a new instance of ClientAssetsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientAssetsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientAssetsService {
	mock := &ClientAssetsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
