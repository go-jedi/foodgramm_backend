// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	recipeevent "github.com/go-jedi/foodgrammm-backend/internal/domain/recipe_event"
	mock "github.com/stretchr/testify/mock"
)

// RecipeEventService is an autogenerated mock type for the RecipeEventService type
type RecipeEventService struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *RecipeEventService) All(ctx context.Context) ([]recipeevent.Recipe, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []recipeevent.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]recipeevent.Recipe, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []recipeevent.Recipe); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]recipeevent.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllByTypeID provides a mock function with given fields: ctx, typeID
func (_m *RecipeEventService) AllByTypeID(ctx context.Context, typeID int64) ([]recipeevent.Recipe, error) {
	ret := _m.Called(ctx, typeID)

	if len(ret) == 0 {
		panic("no return value specified for AllByTypeID")
	}

	var r0 []recipeevent.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]recipeevent.Recipe, error)); ok {
		return rf(ctx, typeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []recipeevent.Recipe); ok {
		r0 = rf(ctx, typeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]recipeevent.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, typeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, dto
func (_m *RecipeEventService) Create(ctx context.Context, dto recipeevent.CreateDTO) (recipeevent.Recipe, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 recipeevent.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipeevent.CreateDTO) (recipeevent.Recipe, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipeevent.CreateDTO) recipeevent.Recipe); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(recipeevent.Recipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipeevent.CreateDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, recipeID
func (_m *RecipeEventService) DeleteByID(ctx context.Context, recipeID int64) (int64, error) {
	ret := _m.Called(ctx, recipeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, recipeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, recipeID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, recipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, recipeID
func (_m *RecipeEventService) GetByID(ctx context.Context, recipeID int64) (recipeevent.Recipe, error) {
	ret := _m.Called(ctx, recipeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 recipeevent.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (recipeevent.Recipe, error)); ok {
		return rf(ctx, recipeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) recipeevent.Recipe); ok {
		r0 = rf(ctx, recipeID)
	} else {
		r0 = ret.Get(0).(recipeevent.Recipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, recipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *RecipeEventService) Update(ctx context.Context, dto recipeevent.UpdateDTO) (recipeevent.Recipe, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 recipeevent.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recipeevent.UpdateDTO) (recipeevent.Recipe, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recipeevent.UpdateDTO) recipeevent.Recipe); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(recipeevent.Recipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, recipeevent.UpdateDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecipeEventService creates a new instance of RecipeEventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeEventService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeEventService {
	mock := &RecipeEventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
