// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	recipeofdays "github.com/go-jedi/foodgramm_backend/internal/domain/recipe_of_days"
	mock "github.com/stretchr/testify/mock"
)

// RecipeOfDaysService is an autogenerated mock type for the RecipeOfDaysService type
type RecipeOfDaysService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *RecipeOfDaysService) Create(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *RecipeOfDaysService) Get(ctx context.Context) (recipeofdays.Recipe, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 recipeofdays.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (recipeofdays.Recipe, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) recipeofdays.Recipe); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(recipeofdays.Recipe)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecipeOfDaysService creates a new instance of RecipeOfDaysService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecipeOfDaysService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecipeOfDaysService {
	mock := &RecipeOfDaysService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
