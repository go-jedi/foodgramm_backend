// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// IFileServer is an autogenerated mock type for the IFileServer type
type IFileServer struct {
	mock.Mock
}

// UploadAndConvertToWebP provides a mock function with given fields: ctx, fileHeader
func (_m *IFileServer) UploadAndConvertToWebP(ctx context.Context, fileHeader *multipart.FileHeader) (string, error) {
	ret := _m.Called(ctx, fileHeader)

	if len(ret) == 0 {
		panic("no return value specified for UploadAndConvertToWebP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) (string, error)); ok {
		return rf(ctx, fileHeader)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) string); ok {
		r0 = rf(ctx, fileHeader)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, fileHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFileServer creates a new instance of IFileServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFileServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFileServer {
	mock := &IFileServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
